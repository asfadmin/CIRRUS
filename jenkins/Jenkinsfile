pipeline {
  parameters {
    choice(name: 'MATURITY', choices: ['dev', 'int', 'test', 'prod'], description: 'The MATURITY (AWS) account to deploy')
    string(name: 'BUILD_NUM', defaultValue: '${env.BUILD_ID}', description: 'Build number')
    string(name: 'DEPLOY_NAME', defaultValue: '', description: 'The name of the stack for this MATURITY')

    string(name: 'DAAC_REPO', defaultValue: 'https://github.com/asfadmin/CIRRUS-core', description: '')
    string(name: 'DAAC_REF', defaultValue: 'dms-PR-2695', description: '')

    string(name: 'AWS_REGION', defaultValue: '', description: 'AWS Region to deploy to')
    credentials(
        name: 'AWS_CREDS',
        description: '',
        defaultValue: 'ASF-117169578524',
        credentialType: 'com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl',
        required: true
      )

    credentials(
        name: 'CMR_CREDS_ID',
        credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
        defaultValue: 'asf-cumulus-core-cmr_creds_UAT', //<option value="asf-cumulus-core-cmr_creds_UAT">benbart/****** (CMR username &amp; password for use in the asf-cumulus-core NGAP sandbox account)</option>
        description: '',
        required: true
      )
    credentials(
        name: 'URS_CREDS_ID',
        credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
        defaultValue: 'aa4a3277-cfd4-4edb-90dc-f55f6f99f835', //<option value="aa4a3277-cfd4-4edb-90dc-f55f6f99f835">Jenkins/******</option>
        description: 'urs_client_id and urs_password for cumulus',
        required: true
      )
    credentials(
        name: 'SECRET_TOKEN_ID',
        credentialType: 'com.cloudbees.plugins.credentials.impl.SecretTextCredentialsImpl',
        defaultValue: 'cumulus-sandbox-token-secret-20200114', //<option value="cumulus-sandbox-token-secret-20200114">"token_secret" for cumulus deployment</option>
        description: '',
        required: true
    )

    string(name: 'CHAT_HOST', defaultValue: 'https://chat.asf.alaska.edu/hooks/dm8kzc8rxpr57xkt9w6tnfaasr', description: '')
    choice(name: 'CHAT_ROOM', choices: ['rain-jenkinsnotifications', 'bbarton-scratch', 'raindev', 'rain'], description: '')
  }

  // Environment Setup
  environment {
    AWS_PROFILENAME="jenkins"
    BUILD_NUM="${params.BUILD_ID}"
  } // env

  // Build on a slave with docker (for pre-req?)
  agent { label 'docker' }

  stages {
    stage('Start Cumulus Deployment') {
      steps {
        // Send chat notification
        mattermostSend channel: "${CHAT_ROOM}", color: '#EAEA5C', endpoint: "${params.CHAT_HOST}", message: "Build started: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>). See (<{$env.RUN_CHANGES_DISPLAY_URL}|Changes>)."
      }
    }
    stage('Clone and checkout DAAC repo/ref') {
      steps {
        sh "cd ${WORKSPACE}"
        sh "if [ ! -d \"daac-repo\" ]; then git clone ${params.DAAC_REPO} daac-repo; fi"
        sh "cd daac-repo && git fetch origin --tags && git checkout ${params.DAAC_REF}"
        // If working in a branch, we need to be sure to `git pull` new changes
        sh "cd daac-repo && if [ `git show -s --pretty=%d HEAD | grep -c 'HEAD, tag'` -gt 0 ]; then echo 'Tag is up-to-date'; else git pull; fi && cd .."
        sh 'tree'
      }
    }
    stage('Build the CIRRUS deploy Docker image') {
      steps {
        sh """docker build -f Dockerfile -t cirrus-core .
           """
      }
    }
    stage('Deploy Cumulus within CIRRUS deploy Docker container') {
      environment {
        BUILD_ID = "${env.BUILD_NUM}"
        CMR_CREDS = credentials("${params.CMR_CREDS_ID}")
        URS_CREDS = credentials("${params.URS_CREDS_ID}")
        TOKEN_SECRET = credentials("${params.SECRET_TOKEN_ID}")/**/
      }
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${params.AWS_CREDS}"]])  {

            sh '''export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
                  export AWS_ACCOUNT_ID_LAST4=$(echo -n $AWS_ACCOUNT_ID | tail -c 4)
                  docker run --rm   --user `id -u` \
                                    --env DAAC_DIR="/daac-repo" \
                                    --env BUILD_NUM="${BUILD_ID}" \
                                    --env DEPLOY_NAME="${DEPLOY_NAME}" \
                                    --env MATURITY="${MATURITY}" \
                                    --env AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
                                    --env AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
                                    --env AWS_REGION="${AWS_REGION}" \
                                    --env AWS_ACCOUNT_ID_LAST4="${AWS_ACCOUNT_ID_LAST4}" \
                                    --env TF_VAR_cmr_username="${CMR_CREDS_USR}" \
                                    --env TF_VAR_cmr_password="${CMR_CREDS_PSW}" \
                                    --env TF_VAR_urs_client_id="${URS_CREDS_USR}" \
                                    --env TF_VAR_urs_client_password="${URS_CREDS_PSW}" \
                                    --env TF_VAR_token_secret="${TOKEN_SECRET}" \
                                    -v "${WORKSPACE}":/CIRRUS-core \
                                    -v "${WORKSPACE}/daac-repo":/daac-repo \
                                    cirrus-core \
                                    /bin/bash -c "make all"
            '''

        }// withCredentials
      }// steps
    }// stage
  } // stages
  // Send build status to Mattermost, Update build badge
  post {
    always {
      sh 'echo "done"'
    }
    success {
      mattermostSend channel: "${CHAT_ROOM}", color: '#CEEBD3', endpoint: "${params.CHAT_HOST}", message: "Build Successful: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
    }
    failure {
      sh "env"
      sh "echo ${WORKSPACE}"
      sh "cd \"${WORKSPACE}\""
      sh "tree"

      mattermostSend channel: "${CHAT_ROOM}", color: '#FFBDBD', endpoint: "${params.CHAT_HOST}", message: "Build Failed:  ðŸ¤¬${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)ðŸ¤¬"

    }
    changed {
      sh "echo 'This will run only if the state of the Pipeline has changed' && echo 'For example, if the Pipeline was previously failing but is now successful'"
    }
  }

} // pipeline
